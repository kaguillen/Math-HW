out.matrix <- do.call( rbind, Map( map.function, levels ) )
out.matrix <- cbind( levels, out.matrix )
out.matrix <- rbind( out.matrix, c( 'Total', summary.function( y ) ) )
colnames( out.matrix )[ 1 ] <- as.character( substitute( x.1 ) )
return( out.matrix )
}
with( raw.mushroom.data,
signif( table( cap.shape, useNA = 'always' ) / n, 4 ) )
with( raw.mushroom.data, tab.sum( cap.shape, poisonous ) )
summary( linear.model.1 <- lm( poisonous ~ cap.shape,
data = raw.mushroom.data ) )
p.hat.linear.model.1 <- predict( linear.model.1, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
pdf( 'stat-206-take-home-test-3-part-2-solutions-figure-1.pdf' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
dev.off( )
c( mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ) )
################ the second block of code ends here #################
################ the third block of code begins here ################
univariate.exploration <- function( new.variable ) {
print( with( raw.mushroom.data,
signif( table( new.variable, useNA = 'always' ) / n, 4 ) ) )
print( with( raw.mushroom.data, tab.sum( new.variable, poisonous ) ) )
print( summary( temp.linear.model <- lm( poisonous ~ new.variable,
data = raw.mushroom.data ) ) )
p.hat.temp.linear.model <- predict( temp.linear.model, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
print( c(
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ) ) )
}
with( raw.mushroom.data, univariate.exploration( cap.surface ) )
install.packages( 'R.utils' )
require( R.utils )
predictors <- colnames( raw.mushroom.data )[ 2:22 ]
for ( predictor in predictors) {
printf( "\n\n==============  %s  ==============\n", predictor )
with( raw.mushroom.data,
univariate.exploration( eval( parse( text = predictor ) ) ) )
}
setwd("~/Documents/Math-HW/Stats-206/THT-3.2/Mushroom-Data-Analysis")
rm( list = ls( ) )
raw.mushroom.data <- read.csv( 'stat-206-mushroom-data.txt', header = T,
stringsAsFactors = T )
str( raw.mushroom.data )
print(
n <- dim( raw.mushroom.data )[ 1 ]
)
raw.mushroom.data$poisonous <- ifelse( raw.mushroom.data$poisonous == 'p',
1, 0 )
raw.mushroom.data <- subset( raw.mushroom.data, select = - veil.type )
str( raw.mushroom.data )
with( raw.mushroom.data, mean( poisonous ) )
tab.sum <- function( x.1, y ) {
stopifnot( length( x.1 ) == length( y ) )
summary.function <- function( x ) {
return( list( n = length( x ), mean = mean( x, na.rm = TRUE ),
sd = sd( x, na.rm = TRUE ) ) )
}
map.function <- function( level ) {
indices <- ( x.1 == level )
summary.function( y[ indices ] )
}
levels <- sort( unique( x.1 ) )
out.matrix <- do.call( rbind, Map( map.function, levels ) )
out.matrix <- cbind( levels, out.matrix )
out.matrix <- rbind( out.matrix, c( 'Total', summary.function( y ) ) )
colnames( out.matrix )[ 1 ] <- as.character( substitute( x.1 ) )
return( out.matrix )
}
with( raw.mushroom.data,
signif( table( cap.shape, useNA = 'always' ) / n, 4 ) )
with( raw.mushroom.data, tab.sum( cap.shape, poisonous ) )
summary( linear.model.1 <- lm( poisonous ~ cap.shape,
data = raw.mushroom.data ) )
p.hat.linear.model.1 <- predict( linear.model.1, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
pdf( 'stat-206-take-home-test-3-part-2-solutions-figure-1.pdf' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
dev.off( )
c( mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ) )
################ the second block of code ends here #################
################ the third block of code begins here ################
univariate.exploration <- function( new.variable ) {
print( with( raw.mushroom.data,
signif( table( new.variable, useNA = 'always' ) / n, 4 ) ) )
print( with( raw.mushroom.data, tab.sum( new.variable, poisonous ) ) )
print( summary( temp.linear.model <- lm( poisonous ~ new.variable,
data = raw.mushroom.data ) ) )
p.hat.temp.linear.model <- predict( temp.linear.model, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
print( c(
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ) ) )
}
with( raw.mushroom.data, univariate.exploration( cap.surface ) )
install.packages( 'R.utils' )
require( R.utils )
predictors <- colnames( raw.mushroom.data )[ 2:22 ]
for ( predictor in predictors) {
printf( "\n\n==============  %s  ==============\n", predictor )
with( raw.mushroom.data,
univariate.exploration( eval( parse( text = predictor ) ) ) )
}
install.packages("R.utils")
rm( list = ls( ) )
raw.mushroom.data <- read.csv( 'stat-206-mushroom-data.txt', header = T,
stringsAsFactors = T )
str( raw.mushroom.data )
raw.mushroom.data <- read.csv( 'stat-206-mushroom-data-2.txt', header = T,
stringsAsFactors = T )
str( raw.mushroom.data )
print(
n <- dim( raw.mushroom.data )[ 1 ]
)
raw.mushroom.data$poisonous <- ifelse( raw.mushroom.data$poisonous == 'p',
1, 0 )
raw.mushroom.data <- subset( raw.mushroom.data, select = - veil.type )
str( raw.mushroom.data )
with( raw.mushroom.data, mean( poisonous ) )
tab.sum <- function( x.1, y ) {
stopifnot( length( x.1 ) == length( y ) )
summary.function <- function( x ) {
return( list( n = length( x ), mean = mean( x, na.rm = TRUE ),
sd = sd( x, na.rm = TRUE ) ) )
}
map.function <- function( level ) {
indices <- ( x.1 == level )
summary.function( y[ indices ] )
}
levels <- sort( unique( x.1 ) )
out.matrix <- do.call( rbind, Map( map.function, levels ) )
out.matrix <- cbind( levels, out.matrix )
out.matrix <- rbind( out.matrix, c( 'Total', summary.function( y ) ) )
colnames( out.matrix )[ 1 ] <- as.character( substitute( x.1 ) )
return( out.matrix )
}
with( raw.mushroom.data,
signif( table( cap.shape, useNA = 'always' ) / n, 4 ) )
with( raw.mushroom.data, tab.sum( cap.shape, poisonous ) )
summary( linear.model.1 <- lm( poisonous ~ cap.shape,
data = raw.mushroom.data ) )
p.hat.linear.model.1 <- predict( linear.model.1, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
pdf( 'stat-206-take-home-test-3-part-2-solutions-figure-1.pdf' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
dev.off( )
c( mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ) )
################ the second block of code ends here #################
################ the third block of code begins here ################
univariate.exploration <- function( new.variable ) {
print( with( raw.mushroom.data,
signif( table( new.variable, useNA = 'always' ) / n, 4 ) ) )
print( with( raw.mushroom.data, tab.sum( new.variable, poisonous ) ) )
print( summary( temp.linear.model <- lm( poisonous ~ new.variable,
data = raw.mushroom.data ) ) )
p.hat.temp.linear.model <- predict( temp.linear.model, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
print( c(
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.temp.linear.model[ raw.mushroom.data$poisonous == 0 ] ) ) )
}
with( raw.mushroom.data, univariate.exploration( cap.surface ) )
install.packages( 'R.utils' )
require( R.utils )
predictors <- colnames( raw.mushroom.data )[ 2:22 ]
for ( predictor in predictors) {
printf( "\n\n==============  %s  ==============\n", predictor )
with( raw.mushroom.data,
univariate.exploration( eval( parse( text = predictor ) ) ) )
}
install.packages("R.utils")
summary( linear.model.all.predictors <- lm( poisonous ~ .,
data = raw.mushroom.data ) )
p.hat.linear.model.all.predictors <-
predict( linear.model.all.predictors, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
c(
mean( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.linear.model.all.predictors[ raw.mushroom.data$poisonous == 0 ] )
)
dynamic.require <- function( package ) {
if ( eval( parse( text = paste( 'require(', package, ')' ) ) ) ) {
return( 'done' )
}
install.packages( package )
return( eval( parse( text = paste( 'require(', package, ')' ) ) ) )
}
dynamic.require( 'DAAG' )
cross.validation.all.predictors.10.fold <- cv.lm(
data = raw.mushroom.data, form.lm = formula( poisonous ~ . ),
m = 10, printit = F )
sqrt( attr( cross.validation.all.predictors.10.fold, 'ms' ) )
null.model <- lm( poisonous ~ 1, data = raw.mushroom.data )
full.model <- lm( poisonous ~ ., data = raw.mushroom.data )
variable.selection.with.bic <- step( null.model,
scope = list( lower = null.model, upper = full.model ),
direction = 'forward', trace = 1, steps = 1000, k = log( n ) )
summary( linear.model.just.odor <-
lm( poisonous ~ odor, data = raw.mushroom.data ) )
p.hat.linear.model.just.odor <-
predict( linear.model.just.odor, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.just.odor[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.just.odor[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
table( p.hat.linear.model.just.odor, useNA = 'always' )
app.says.poisonous.0.05 <- ifelse( p.hat.linear.model.just.odor > 0.05, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.05, poisonous ) )
app.says.poisonous.0.01 <- ifelse( p.hat.linear.model.just.odor > 0.01, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.01, poisonous ) )
summary( linear.model.odor.spore.print.color <-
lm( poisonous ~ odor + spore.print.color, data = raw.mushroom.data ) )
p.hat.linear.model.odor.spore.print.color <-
predict( linear.model.odor.spore.print.color, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.odor.spore.print.color[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.odor.spore.print.color[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
table( p.hat.linear.model.odor.spore.print.color, useNA = 'always' )
odor.spore.print.color.app.says.poisonous.0.05 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.05, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.05,
poisonous ) )
#                                               poisonous
# odor.spore.print.color.app.says.poisonous.0.05    0    1
#                                              0 3584    0
#                                              1  624 3916
odor.spore.print.color.app.says.poisonous.0.07 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.07, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.07,
poisonous ) )
#                                               poisonous
# odor.spore.print.color.app.says.poisonous.0.07    0    1
#                                              0 3632    0
#                                              1  576 3916
odor.spore.print.color.app.says.poisonous.0.08 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.08, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.08,
poisonous ) )
576 / (576 + 3632)
48 / (3869 + 48)
View(raw.mushroom.data)
48 / (3868 + 48)
624/ (624 + 3584)
source("~/.active-rstudio-document")
install.packages("R.utils")
source("~/.active-rstudio-document")
install.packages("R.utils")
dynamic.require <- function( package ) {
if ( eval( parse( text = paste( 'require(', package, ')' ) ) ) ) {
return( 'done' )
}
install.packages( package )
return( eval( parse( text = paste( 'require(', package, ')' ) ) ) )
}
dynamic.require( 'DAAG' )
cross.validation.all.predictors.10.fold <- cv.lm(
data = raw.mushroom.data, form.lm = formula( poisonous ~ . ),
m = 10, printit = F )
warnings( )
# Warning messages:
# 1: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 2: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 3: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 4: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 5: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 6: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 7: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 8: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 9: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 10: In predict.lm(subs.lm, newdata = data[rows.out, ]) :
#   prediction from a rank-deficient fit may be misleading
# 11: In cv.lm(data = raw.mushroom.data, form.lm = formula(poisonous ~  ... :
#  As there is >1 explanatory variable, cross-validation
#  predicted values for a fold are not a linear function
#  of corresponding overall predicted values.  Lines that
#  are shown for the different folds are approximate
# the next function call computes the cross-validated
# root-mean-squared error of the regression predictions,
# which is essentially the same as the value
# from the regression with the full data set
sqrt( attr( cross.validation.all.predictors.10.fold, 'ms' ) )
source("~/.active-rstudio-document")
install.packages("R.utils")
rm( list = ls( ) )
raw.mushroom.data <- read.csv( 'stat-206-mushroom-data-2.txt', header = T,
stringsAsFactors = T )
str( raw.mushroom.data )
print(
n <- dim( raw.mushroom.data )[ 1 ]
)
raw.mushroom.data$poisonous <- ifelse( raw.mushroom.data$poisonous == 'p',
1, 0 )
raw.mushroom.data <- subset( raw.mushroom.data, select = - veil.type )
str( raw.mushroom.data )
with( raw.mushroom.data, mean( poisonous ) )
tab.sum <- function( x.1, y ) {
stopifnot( length( x.1 ) == length( y ) )
summary.function <- function( x ) {
return( list( n = length( x ), mean = mean( x, na.rm = TRUE ),
sd = sd( x, na.rm = TRUE ) ) )
}
map.function <- function( level ) {
indices <- ( x.1 == level )
summary.function( y[ indices ] )
}
levels <- sort( unique( x.1 ) )
out.matrix <- do.call( rbind, Map( map.function, levels ) )
out.matrix <- cbind( levels, out.matrix )
out.matrix <- rbind( out.matrix, c( 'Total', summary.function( y ) ) )
colnames( out.matrix )[ 1 ] <- as.character( substitute( x.1 ) )
return( out.matrix )
}
with( raw.mushroom.data,
signif( table( cap.shape, useNA = 'always' ) / n, 4 ) )
with( raw.mushroom.data, tab.sum( cap.shape, poisonous ) )
summary( linear.model.1 <- lm( poisonous ~ cap.shape,
data = raw.mushroom.data ) )
p.hat.linear.model.1 <- predict( linear.model.1, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
pdf( 'stat-206-take-home-test-3-part-2-solutions-figure-1.pdf' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
dev.off( )
c( mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ),
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 1 ] ) -
mean( p.hat.linear.model.1[ raw.mushroom.data$poisonous == 0 ] ) )
source("~/.active-rstudio-document")
install.packages("R.utils")
source("~/.active-rstudio-document")
install.packages("R.utils")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("R.utils")
source("~/.active-rstudio-document")
install.packages("R.utils")
source("~/.active-rstudio-document")
install.packages("R.utils")
odor.spore.print.color.app.says.poisonous.0.08 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.08, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.08,
poisonous ) )
summary( linear.model.just.odor <-
lm( poisonous ~ odor, data = raw.mushroom.data ) )
p.hat.linear.model.just.odor <-
predict( linear.model.just.odor, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.just.odor[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.just.odor[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
table( p.hat.linear.model.just.odor, useNA = 'always' )
app.says.poisonous.0.05 <- ifelse( p.hat.linear.model.just.odor > 0.05, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.05, poisonous ) )
app.says.poisonous.0.01 <- ifelse( p.hat.linear.model.just.odor > 0.01, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.01, poisonous ) )
8
summary( linear.model.odor.spore.print.color <-
lm( poisonous ~ odor + spore.print.color, data = raw.mushroom.data ) )
p.hat.linear.model.odor.spore.print.color <-
predict( linear.model.odor.spore.print.color, type = 'response' )
par( mfrow = c( 2, 1 ) )
hist( p.hat.linear.model.odor.spore.print.color[ raw.mushroom.data$poisonous == 0 ],
nclass = 100, main = 'y = 0', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
hist( p.hat.linear.model.odor.spore.print.color[ raw.mushroom.data$poisonous == 1 ],
nclass = 100, main = 'y = 1', xlab = 'p.hat', prob = T,
xlim = c( 0, 1 ) )
par( mfrow = c( 1, 1 ) )
table( p.hat.linear.model.odor.spore.print.color, useNA = 'always' )
odor.spore.print.color.app.says.poisonous.0.05 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.05, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.05,
poisonous ) )
odor.spore.print.color.app.says.poisonous.0.07 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.07, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.07,
poisonous ) )
odor.spore.print.color.app.says.poisonous.0.08 <-
ifelse( p.hat.linear.model.odor.spore.print.color > 0.08, 1, 0 )
with( raw.mushroom.data, table( odor.spore.print.color.app.says.poisonous.0.08,
poisonous ) )
app.says.poisonous.0.05 <- ifelse( p.hat.linear.model.just.odor > 0.05, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.05, poisonous ) )
#                        poisonous
# app.says.poisonous.0.05    0    1
#                       0 4208  120
#                       1    0 3796
app.says.poisonous.0.01 <- ifelse( p.hat.linear.model.just.odor > 0.01, 1, 0 )
with( raw.mushroom.data, table( app.says.poisonous.0.01, poisonous ) )
